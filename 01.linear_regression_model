Sure — here’s a simple Python example of linear regression for stock/index price prediction (e.g., Nifty50) using historical data.

I’ll make it so you can run it directly if you have a CSV file with Date and Close price:

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import numpy as np

# ---------------------------
# 1. Load Data
# ---------------------------
# Your CSV should have columns: Date, Close
df = pd.read_csv("file_name.csv")
df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values('Date')  # Ensure time order

# ---------------------------
# 2. Feature Engineering
# ---------------------------
# We'll predict tomorrow's price based on today's index position in time
df['Days'] = (df['Date'] - df['Date'].min()).dt.days

X = df[['Days']].values
y = df['Close'].values

# ---------------------------
# 3. Train-Test Split
# ---------------------------
split = int(len(df) * 0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# ---------------------------
# 4. Train Linear Regression
# ---------------------------
model = LinearRegression()
model.fit(X_train, y_train)

# ---------------------------
# 5. Predictions
# ---------------------------
y_pred = model.predict(X_test)

# ---------------------------
# 6. Evaluation
# ---------------------------
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R² Score: {r2:.4f}")

# ---------------------------
# 7. Visualization
# ---------------------------
plt.figure(figsize=(10,6))
plt.scatter(df['Date'], y, label="Actual", color="blue")
plt.plot(df['Date'], model.predict(X), label="Predicted", color="red")
plt.xlabel("Date")
plt.ylabel("Nifty50 Close Price")
plt.title("Nifty50 Price Prediction with Linear Regression")
plt.legend()
plt.show()


---

How It Works

1. Converts Date to a numeric day count so the model can understand time progression.


2. Fits a simple linear regression to predict price from the day number.


3. Splits data into 80% training and 20% testing.


4. Evaluates the model with MSE and R² score.


5. Plots actual vs predicted prices.




---

⚠ Note:
Linear regression is very basic — for real market prediction, you’d need:

More features (volume, technical indicators, macroeconomic data).

Non-linear models (Random Forest, XGBoost, LSTM).

Feature scaling, normalization, and careful train/test splitting to avoid lookahead bias.



---

If you want, I can upgrade this code so it pulls Nifty50 historical data automatically from Yahoo Finance instead of needing a CSV. That way you can test it right now without manually downloading data.

Do you want me to do that?

We use Mean Squared Error (MSE) and R² score in linear regression because they measure two different aspects of how good the model is:


---

1. Mean Squared Error (MSE)

What it measures:
The average of the squared differences between predicted and actual values.


MSE = \frac{1}{n} \sum_{i=1}^n (y_i - \hat{y}_i)^2

Lower MSE means predictions are closer to actual values.

Squaring penalizes large errors more than small ones (important in trading if large misses are costly).

Units: Same as squared target variable (e.g., if price is in ₹, MSE is in ₹²).



---

2. R² Score (Coefficient of Determination)

What it measures:
The proportion of variance in the target variable that is explained by the model.


R^2 = 1 - \frac{\text{Sum of Squared Errors}}{\text{Total Variance}}

1.0 = perfect prediction

0.0 = model predicts no better than the mean

<0.0 = model is worse than just predicting the mean

Gives an intuitive “% of variation explained” measure.

Units: None (it’s a ratio).



---

In short:

MSE → Tells you how far off your predictions are on average.

R² → Tells you how much of the pattern your model is capturing.


Both together give a fuller picture:

A low MSE but low R² → model makes small errors but doesn’t capture much variability.

A high R² but high MSE → model explains trends but makes big misses in scale.



---

If you want, I can show you why relying on only R² or only MSE can be misleading by giving a stock price example where one looks 
good but the other reveals the problem.

Lasso
Ridge
Elasticnet
LassoCV
RidgeCV
ElasticnetCV



